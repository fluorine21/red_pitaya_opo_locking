/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "gpio.h"
#include "xgpio.h"



#define GPIO_DEVICE_0  XPAR_GPIO_0_DEVICE_ID

XGpio Gpio; /* The Instance of the GPIO Driver */


u32 gpio_state;

//Returns 0 on success
u8 gpio_init()
{

	gpio_state = 0;

	if (XGpio_Initialize(&Gpio, GPIO_DEVICE_0) != XST_SUCCESS)
	{
		return 1;
	}


	//set channel 1 and 2 to be all outputs
	XGpio_SetDataDirection(&Gpio, 1, 0);
	XGpio_SetDataDirection(&Gpio, 2, 1);

	//Turn all outputs off by default
	XGpio_DiscreteWrite(&Gpio, 1, 0xffffffff);


	return 0;

}

/*void gpio_set_data(u8 bit, u8 value)
{

	u32 new_gpio_state;
	gpio_state &= 0xffffff00;
	gpio_state |=value;

	XGpio_DiscreteWrite(&Gpio, 1, new_gpio_state);
	gpio_state = new_gpio_state;

}*/


u32 gpio_read_data(u8 address)

void gpio_address(u8 input, u16 address)
{
	u32 gpio_st;
	u32 helper;
	// put in a generic address
	gpio_st = address << 8;
	// OR With input to make data
	gpio_st |= input;
	// Write the first cycle
	XGpio_DiscreteWrite(&Gpio, 1, gpio_st);
	// make top bit 1 to make rising edge of clock
	helper = 1 << 31;
	gpio_st |= helper;
	XGpio_DiscreteWrite(&Gpio, 1, gpio_st);
	// We have to make the top bit zero in order to complete one complete cycle.
	gpio_st &= !helper;
	XGpio_DiscreteWrite(&Gpio, 1, gpio_st);
}


void gpio_user_cntr(u8 input)
{
	int user_cntr_add; // make variable in case this wants to be changed
	user_cntr_add = 0;
	gpio_address(input, user_cntr_add);
}

void gpio_sinc_in(u8 input)
{
	int sinc_in_add;
	sinc_in_add = 1;
	gpio_address(input, sinc_in_add);
}
void gpio_inc_in(u32 input)
{
	// Since gpio_address takes only 8 bits at a time, we have to call 4 times
	int sinc_in_add;
	sinc_in_add = 2;
	for(int i = 0; i < 4; i = i + 1)
	{
		u8 data = (input >> (3-i))&0xff;
		gpio_address(data, sinc_in_add);
	}

}

void gpio_mul_scalar(u8 input)
{
	int mul_scalar_add;
	mul_scalar_add = 3;
	gpio_address(input, mul_scalar_add);
}
void gpio_led_out(u8 input)
{
	int led_scalar_add;
	led_scalar_add = 4;
	gpio_address(input, led_scalar_add);
}
/////////////////////////////////////////////////////////////////////////



int main()
{
    init_platform();

    print("Hello World\n\r");
    print("Successfully ran Hello World application");
    u8 a;
    a = gpio_init();
    xil_printf("%d", a);
    gpio_user_cntr(1);
    gpio_sinc_in(1);
    gpio_led_out(3);
    cleanup_platform();
    return 0;
}
